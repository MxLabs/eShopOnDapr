@page "/basket"
@using eShopOnDapr.BlazorClient.Basket
@inject UserBasket UserBasket
@inject NavigationManager NavigationManager

<div class="esh-basket">
    <div class="container">
        <h1 class="mb-4 mt-5">[ Shopping Bag ]</h1>
        <div *ngFor="let errorMessage of errorMessages">
            <div class="esh-basket-items-margin-left1 row">
                <div class="alert alert-warning" role="alert">&nbsp;{{errorMessage}}</div>
            </div>
        </div>

        <div class="row">
            <div class="col-6 col-md-8 col-lg-9">
                <div class="esh-basket-items row">
                    @foreach (var item in UserBasket.Items)
                    {
        <div class="col-12 col-md-6 col-lg-4">
            <article class="esh-basket-item">
                <div class="esh-basket-thumbnail-wrapper">
                    <div class="esh-basket-delete" @onclick="@(() => UserBasket.RemoveItemAsync(item))">
                        <img class="esh-basket-delete-svg" src="images/delete.svg" />
                    </div>
                    <img class="esh-basket-thumbnail" src="@item.PictureUrl" />
                </div>
                <div class="esh-basket-title">@item.ProductName</div>
                <div class="esh-basket-description divider d-flex align-items-center justify-content-between">
                    <div class="">$@item.UnitPrice</div>
                    <div class="esh-basket-buttons d-flex justify-content-center">
                        <button class="esh-basket-button @(item.Quantity == 1 ? "is-disabled" : "")"
                                @onclick="@(() => UserBasket.SetItemQuantityAsync(item, item.Quantity - 1))">
                            <img class="esh-basket-button-svg"
                                 src="images/minus.svg" />
                        </button>
                        <div class="esh-basket-quantity">@item.Quantity</div>
                        <button class="esh-basket-button"
                                @onclick="@(() => UserBasket.SetItemQuantityAsync(item, item.Quantity + 1))">
                            <img class="esh-basket-button-svg"
                                 src="images/plus.svg" />
                        </button>
                    </div>
                    <div class="esh-basket-price text-right">$@UserBasket.GetFormattedTotalPrice()</div>
                </div>
                @if (item.OldUnitPrice > 0)
                {
<div class="">
    &nbsp;Note that the price of this article changed in our Catalog. The old price when you originally added it to the basket was $ {{item.oldUnitPrice}}
</div>                }
            </article>
        </div>}
                </div>
            </div>
            <div class="col-6 col-md-4 col-lg-3">
                <div class="esh-basket-checkout p-4">
                    <h2 class="esh-basket-checkout-title">Your shopping bag</h2>
                    <div class="mb-3 u-text-sm">(@UserBasket.TotalItemCount items)</div>

                    <div class="d-flex justify-content-between align-items-center font-weight-bolder">
                        <div>TOTAL</div>
                        <div>$@UserBasket.GetFormattedTotalPrice()</div>
                    </div>
                </div>

                <div class="divider u-background-brightest p-4">
                    <div>
                        <button class="btn btn-primary u-width-100 u-minwidth-unset" @onclick=@Checkout>Checkout</button>
                    </div>
                </div>
                <div class="p-4">
                    <NavLink class="btn btn-secondary u-width-100 u-minwidth-unset" href="/">Continue Shopping</NavLink>
                </div>
            </div>
        </div>
    </div>
</div>


@code {

    protected override void OnInitialized()
    {
        UserBasket.ItemsChanged += (s, e) => StateHasChanged();
    }

    private void Checkout()
    {
        NavigationManager.NavigateTo("checkout");
    }
}
