@page "/"
@using eShopOnDapr.BlazorClient.Basket
@using eShopOnDapr.BlazorClient.Catalog
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject UserBasket _basket
@inject CatalogClient CatalogClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IAccessTokenProvider TokenProvider

<section class="esh-catalog-filters">
    <div class="container">
        @* <div class="alert alert-warning" role="alert" [hidden]="!errorReceived">
            Error requesting catalog products, please try later on
        </div> *@
        <div class="esh-catalog-filters-wrapper d-flex align-items-end mt-3">
            <div class="esh-catalog-filter-wrapper">
                <label class="esh-catalog-label" for="brand">Brand</label>
                <select class="esh-catalog-filter form-control" id="brand" @onchange=@OnBrandChangedAsync>
                    @foreach (var brand in brands)
                    {
                        <option value=@brand.Id>@brand.Name</option>
                    }
                </select>
            </div>
            <div class="esh-catalog-filter-wrapper">
                <label class="esh-catalog-label" for="type">Type</label>
                <select class="esh-catalog-filter form-control" id="type" @onchange=@OnTypeChangedAsync>
                    @foreach (var type in types)
                    {
                        <option value=@type.Id>@type.Name</option>
                    }
                </select>
            </div>
        </div>
    </div>
</section>

<div class="container">
    @if (results?.Count > 0)
    {
        <Pager ItemCount="@results.Data.Count()"
            TotalCount="@results.Count"
            PageIndex="@results.PageIndex"
            PageCount="@results.PageCount"
            OnClick="OnPageIndexChangedAsync"/>

        <div class="esh-catalog-items row">
            @foreach (var item in results.Data)
            {
                <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                    <div class="esh-catalog-item @(!_user.Identity.IsAuthenticated ? "is-disabled" : "")" @onclick="@(e => _basket.AddItemAsync(item))">
                        <div class="esh-catalog-thumbnail-wrapper">
                            <div class="esh-catalog-thumbnail-icon d-flex justify-content-center">
                                <img class="esh-catalog-thumbnail-icon-svg" src="images/add.svg" />
                            </div>
                            <img class="esh-catalog-thumbnail" src="@item.PictureUri" />
                        </div>
                        <div class="esh-catalog-details d-flex justify-content-between align-items-center">
                            <div class="esh-catalog-name ml-3">
                                <span>@item.Name</span>
                            </div>
                            <div class="esh-catalog-price mr-3">
                                <span>@item.GetFormattedPrice()</span>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <Pager ItemCount="@results.Data.Count()"
            TotalCount="@results.Count"
            PageIndex="@results.PageIndex"
            PageCount="@results.PageCount"
            OnClick="OnPageIndexChangedAsync"/>
    }
    else
    {
        <span>THERE ARE NO RESULTS THAT MATCH YOUR SEARCH</span>
    }
</div>

@code {

    // @(!_user.Identity.IsAuthenticated ? "is-disabled" : "")"

    CatalogPage results;
    IEnumerable<CatalogBrand> brands = Enumerable.Empty<CatalogBrand>();
    IEnumerable<CatalogType> types = Enumerable.Empty<CatalogType>();

    int pageIndex = 0;
    int brandId = -1;
    int typeId = -1;
    private ClaimsPrincipal _user;

    [CascadingParameter]
    private Task<AuthenticationState> _authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await _authenticationStateTask;
        _user = authenticationState.User;

        Console.WriteLine("INIT CATALOG");
        var token = await TokenProvider.RequestAccessToken();
        if (token.TryGetToken(out AccessToken t))
        {
            Console.WriteLine("TOKEN: " + t.Value);
        }
        await PopulateBrandsAsync();
        await PopulateTypesAsync();
        await PopulateItemsAsync();

        @* return Task.WhenAll(
            PopulateBrands(),
            PopulateItems()); *@
    }

    public async Task OnPageIndexChangedAsync(int newPageIndex)
    {
        this.pageIndex = newPageIndex;

        await PopulateItemsAsync();
    }


    private async Task OnBrandChangedAsync(ChangeEventArgs e)
    {
        this.brandId = int.Parse(e.Value.ToString());
        this.pageIndex = 0;

        await PopulateItemsAsync();
    }

    private async Task OnTypeChangedAsync(ChangeEventArgs e)
    {
        this.typeId = int.Parse(e.Value.ToString());
        this.pageIndex = 0;

        await PopulateItemsAsync();
    }

    private async Task PopulateBrandsAsync()
    {
        var brands = new List<CatalogBrand>
        {
            new CatalogBrand { Id = -1, Name = "All" }
        };

        try
        {
            brands.AddRange(await CatalogClient.GetBrandsAsync());
        }
        catch
        {
        }

        this.brands = brands;
    }

    private async Task PopulateTypesAsync()
    {
        var types = new List<CatalogType>
        {
            new CatalogType { Id = -1, Name = "All" }
        };

        try
        {
            types.AddRange(await CatalogClient.GetTypesAsync());
        }
        catch
        {
        }

        this.types = types;
    }

    private async Task PopulateItemsAsync()
    {
        results = await CatalogClient.GetItemsAsync(this.brandId, this.typeId, this.pageIndex);

        StateHasChanged();
    }
}
